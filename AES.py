import numpy

Sbox = (
        0x63, 0x7c, 0x77, 0x7b, 0xf2, 0x6b, 0x6f, 0xc5, 0x30, 0x01, 0x67, 0x2b, 0xfe, 0xd7, 0xab, 0x76,
        0xca, 0x82, 0xc9, 0x7d, 0xfa, 0x59, 0x47, 0xf0, 0xad, 0xd4, 0xa2, 0xaf, 0x9c, 0xa4, 0x72, 0xc0,
        0xb7, 0xfd, 0x93, 0x26, 0x36, 0x3f, 0xf7, 0xcc, 0x34, 0xa5, 0xe5, 0xf1, 0x71, 0xd8, 0x31, 0x15,
        0x04, 0xc7, 0x23, 0xc3, 0x18, 0x96, 0x05, 0x9a, 0x07, 0x12, 0x80, 0xe2, 0xeb, 0x27, 0xb2, 0x75,
        0x09, 0x83, 0x2c, 0x1a, 0x1b, 0x6e, 0x5a, 0xa0, 0x52, 0x3b, 0xd6, 0xb3, 0x29, 0xe3, 0x2f, 0x84,
        0x53, 0xd1, 0x00, 0xed, 0x20, 0xfc, 0xb1, 0x5b, 0x6a, 0xcb, 0xbe, 0x39, 0x4a, 0x4c, 0x58, 0xcf,
        0xd0, 0xef, 0xaa, 0xfb, 0x43, 0x4d, 0x33, 0x85, 0x45, 0xf9, 0x02, 0x7f, 0x50, 0x3c, 0x9f, 0xa8,
        0x51, 0xa3, 0x40, 0x8f, 0x92, 0x9d, 0x38, 0xf5, 0xbc, 0xb6, 0xda, 0x21, 0x10, 0xff, 0xf3, 0xd2,
        0xcd, 0x0c, 0x13, 0xec, 0x5f, 0x97, 0x44, 0x17, 0xc4, 0xa7, 0x7e, 0x3d, 0x64, 0x5d, 0x19, 0x73,
        0x60, 0x81, 0x4f, 0xdc, 0x22, 0x2a, 0x90, 0x88, 0x46, 0xee, 0xb8, 0x14, 0xde, 0x5e, 0x0b, 0xdb,
        0xe0, 0x32, 0x3a, 0x0a, 0x49, 0x06, 0x24, 0x5c, 0xc2, 0xd3, 0xac, 0x62, 0x91, 0x95, 0xe4, 0x79,
        0xe7, 0xc8, 0x37, 0x6d, 0x8d, 0xd5, 0x4e, 0xa9, 0x6c, 0x56, 0xf4, 0xea, 0x65, 0x7a, 0xae, 0x08,
        0xba, 0x78, 0x25, 0x2e, 0x1c, 0xa6, 0xb4, 0xc6, 0xe8, 0xdd, 0x74, 0x1f, 0x4b, 0xbd, 0x8b, 0x8a,
        0x70, 0x3e, 0xb5, 0x66, 0x48, 0x03, 0xf6, 0x0E, 0x61, 0x35, 0x57, 0xb9, 0x86, 0xc1, 0x1d, 0x9e,
        0xe1, 0xf8, 0x98, 0x11, 0x69, 0xd9, 0x8e, 0x94, 0x9b, 0x1e, 0x87, 0xe9, 0xce, 0x55, 0x28, 0xdf,
        0x8c, 0xa1, 0x89, 0x0d, 0xbf, 0xe6, 0x42, 0x68, 0x41, 0x99, 0x2d, 0x0f, 0xb0, 0x54, 0xbb, 0x16
)

InvSbox = (
        0x52, 0x09, 0x6a, 0xd5, 0x30, 0x36, 0xa5, 0x38, 0xbf, 0x40, 0xa3, 0x9e, 0x81, 0xf3, 0xd7, 0xfb,
        0x7c, 0xe3, 0x39, 0x82, 0x9b, 0x2f, 0xff, 0x87, 0x34, 0x8e, 0x43, 0x44, 0xc4, 0xde, 0xe9, 0xcb,
        0x54, 0x7b, 0x94, 0x32, 0xa6, 0xc2, 0x23, 0x3d, 0xee, 0x4c, 0x95, 0x0b, 0x42, 0xfa, 0xc3, 0x4e,
        0x08, 0x2e, 0xa1, 0x66, 0x28, 0xd9, 0x24, 0xb2, 0x76, 0x5b, 0xa2, 0x49, 0x6d, 0x8b, 0xd1, 0x25,
        0x72, 0xf8, 0xf6, 0x64, 0x86, 0x68, 0x98, 0x16, 0xd4, 0xa4, 0x5c, 0xcc, 0x5d, 0x65, 0xb6, 0x92,
        0x6c, 0x70, 0x48, 0x50, 0xfd, 0xed, 0xb9, 0xda, 0x5e, 0x15, 0x46, 0x57, 0xa7, 0x8d, 0x9d, 0x84,
        0x90, 0xd8, 0xab, 0x00, 0x8c, 0xbc, 0xd3, 0x0a, 0xf7, 0xe4, 0x58, 0x05, 0xb8, 0xb3, 0x45, 0x06,
        0xd0, 0x2c, 0x1e, 0x8f, 0xca, 0x3f, 0x0f, 0x02, 0xc1, 0xaf, 0xbd, 0x03, 0x01, 0x13, 0x8a, 0x6b,
        0x3a, 0x91, 0x11, 0x41, 0x4f, 0x67, 0xdc, 0xea, 0x97, 0xf2, 0xcf, 0xce, 0xf0, 0xb4, 0xe6, 0x73,
        0x96, 0xac, 0x74, 0x22, 0xe7, 0xad, 0x35, 0x85, 0xe2, 0xf9, 0x37, 0xe8, 0x1c, 0x75, 0xdf, 0x6e,
        0x47, 0xf1, 0x1a, 0x71, 0x1d, 0x29, 0xc5, 0x89, 0x6f, 0xb7, 0x62, 0x0E, 0xaa, 0x18, 0xbe, 0x1b,
        0xfc, 0x56, 0x3e, 0x4b, 0xc6, 0xd2, 0x79, 0x20, 0x9a, 0xdb, 0xc0, 0xfe, 0x78, 0xcd, 0x5a, 0xf4,
        0x1f, 0xdd, 0xa8, 0x33, 0x88, 0x07, 0xc7, 0x31, 0xb1, 0x12, 0x10, 0x59, 0x27, 0x80, 0xec, 0x5f,
        0x60, 0x51, 0x7f, 0xa9, 0x19, 0xb5, 0x4a, 0x0d, 0x2d, 0xe5, 0x7a, 0x9f, 0x93, 0xc9, 0x9c, 0xef,
        0xa0, 0xe0, 0x3b, 0x4d, 0xae, 0x2a, 0xf5, 0xb0, 0xc8, 0xeb, 0xbb, 0x3c, 0x83, 0x53, 0x99, 0x61,
        0x17, 0x2b, 0x04, 0x7e, 0xba, 0x77, 0xd6, 0x26, 0xe1, 0x69, 0x14, 0x63, 0x55, 0x21, 0x0c, 0x7d
)



Rcon = (
    (0x00, 0x00, 0x00, 0x00),
    (0x01, 0x00, 0x00, 0x00),
    (0x02, 0x00, 0x00, 0x00),
    (0x04, 0x00, 0x00, 0x00),
    (0x08, 0x00, 0x00, 0x00),
    (0x10, 0x00, 0x00, 0x00),
    (0x20, 0x00, 0x00, 0x00),
    (0x40, 0x00, 0x00, 0x00),
    (0x80, 0x00, 0x00, 0x00),
    (0x1b, 0x00, 0x00, 0x00),
    (0x36, 0x00, 0x00, 0x00)
)

Nr = 10
Nk = 4
bytemask = 0xFF
bitmask = 0x1


xtime = lambda a: (((a << 1) ^ 0x1B) & 0xFF) if (a & 0x80) else (a << 1)


class AES:

    state = numpy.ndarray(shape=(4, 4))
    keys = numpy.ndarray(shape=(11, 4, 4), dtype=int)
    key = "1a2b3c4d5e6f7089"

    def sub_bytes(self):
        ans = []
        for string in self.state:
            for byte in string:
                ans.append(Sbox[byte])

        self.state = numpy.reshape(ans, (4, 4))

    def shift_rows(self):
        for i in range(4):
            ans = []
            for j in range(4):
                ans.append(self.state[i][(i+j) % 4])
            self.state[i] = ans


    #def mix_columns(self):
    #    s = self.state
     #   ss = self.state
    #
 #       for c in range(4):
  #          ss[0][c] = gmult(0x02, s[0][c]) ^ gmult(0x03, s[1][c]) ^ s[2][c] ^ s[3][c]
   #         ss[1][c] = s[0][c] ^ gmult(0x02, s[1][c]) ^ gmult(0x03, s[2][c]) ^ s[3][c]
    #        ss[2][c] = s[0][c] ^ s[1][c] ^ gmult(0x02, s[2][c]) ^ gmult(0x03, s[3][c])
     #       ss[3][c] = gmult(0x03, s[0][c]) ^ s[1][c] ^ s[2][c] ^ gmult(0x02, s[3][c])

      #  self.state = ss

    def invSubBytes(self):
        ans = []
        for string in self.state:
            for byte in string:
                ans.append(InvSbox[byte])

        self.state = numpy.reshape(ans, (4, 4))


    def invShiftRows(self):

        for i in range(4):
            ans = []
            for j in range(4):
                ans.append(self.state[i][(j-i) % 4])
            self.state[i] = ans

    #def invmix_columns(self):
    #    s = self.state
    #    ss = self.state

    #  for c in range(4):
    #        ss[0][c] = gmult(0x0E, s[0][c]) ^ gmult(0x0B, s[1][c]) ^ gmult(0x0D, s[2][c]) ^ gmult(0x09, s[3][c])
    #        ss[1][c] = gmult(0x09, s[0][c]) ^ gmult(0x0E, s[1][c]) ^ gmult(0x0B, s[2][c]) ^ gmult(0x0D, s[3][c])
    #        ss[2][c] = gmult(0x0D, s[0][c]) ^ gmult(0x09, s[1][c]) ^ gmult(0x0E, s[2][c]) ^ gmult(0x0B, s[3][c])
    #       ss[3][c] = gmult(0x0B, s[0][c]) ^ gmult(0x0D, s[1][c]) ^ gmult(0x09, s[2][c]) ^ gmult(0x0E, s[3][c])
    #   self.state = ss
    def mix_single_column(self, a):
        # see Sec 4.1.2 in The Design of Rijndael
        t = a[0] ^ a[1] ^ a[2] ^ a[3]
        u = a[0]
        a[0] ^= t ^ xtime(a[0] ^ a[1])
        a[1] ^= t ^ xtime(a[1] ^ a[2])
        a[2] ^= t ^ xtime(a[2] ^ a[3])
        a[3] ^= t ^ xtime(a[3] ^ u)

    def mix_columns(self):
        for i in range(4):
            self.mix_single_column(self.state[i])

    def invmix_columns(self):
        # see Sec 4.1.3 in The Design of Rijndael
        for i in range(4):
            u = xtime(xtime(self.state[i][0] ^ self.state[i][2]))
            v = xtime(xtime(self.state[i][1] ^ self.state[i][3]))
            self.state[i][0] ^= u
            self.state[i][1] ^= v
            self.state[i][2] ^= u
            self.state[i][3] ^= v

        self.mix_columns()




    def addRoundKey(self, key):
        for i in range(4):
            for j in range(4):
                self.state[i][j] = self.state[i][j] ^ key[i][j]

    def subWord(self, word):
        for i in range(4):
            word[i] = Sbox[word[i]]
        return word

    def rotWord(self, word):
        word = [word[1], word[2], word[3], word[0]]
        return word

    def coef_add(self, a, b):
        d = [0, 0, 0, 0]
        d[0] = a[0] ^ b[0]
        d[1] = a[1] ^ b[1]
        d[2] = a[2] ^ b[2]
        d[3] = a[3] ^ b[3]
        return d

    def expandKey(self):
        w = numpy.empty(shape=(11, 4, 4), dtype=int)
        tmp = numpy.empty(shape=(4, 4), dtype=int)

        w[0] = self.key

        for i in range(1, Nr+1):
            # print(w[i-1])
            tmp[0] = w[(i-1)][0]
            tmp[1] = w[(i-1)][1]
            tmp[2] = w[(i-1)][2]
            tmp[3] = w[(i-1)][3]

            tmp[0] = self.rotWord(tmp[0])
            tmp[0] = self.subWord(tmp[0])
            tmp[0] = self.coef_add(tmp[0], Rcon[i // Nk])

            w[i][0] = w[(i-Nk)][0] ^ tmp[0]
            w[i][1] = w[(i-Nk)][1] ^ tmp[1]
            w[i][2] = w[(i-Nk)][2] ^ tmp[2]
            w[i][3] = w[(i-Nk)][3] ^ tmp[3]

        for i in range(0, Nr+1):
            for j in range(4):
                self.keys[i][j] = w[i][j]

    def encrypt(self):
        self.expandKey()

        self.addRoundKey(self.keys[0])
        for i in range(1, Nr+1):
            self.sub_bytes()
            self.shift_rows()
            self.mix_columns()
            self.addRoundKey(self.keys[i])

        self.sub_bytes()
        self.shift_rows()
        self.addRoundKey(self.keys[-1])

        return self.state

    def decrypt(self):

        self.addRoundKey(self.keys[-1])
        self.invShiftRows()
        self.invSubBytes()

        for i in range(Nr, 0, -1):
            self.addRoundKey(self.keys[i])
            self.invmix_columns()
            self.invShiftRows()
            self.invSubBytes()

        self.addRoundKey(self.keys[0])

        return self.state


if __name__ == "__main__":
    msg = "deadbeeffeedface"  # exactly 16 byte long ascii string, cause im lazy
    key = "3243f6a8885a308d"  # exactly 16 byte long ascii string, cause im lazy
    aes = AES()
    aes.key = numpy.reshape(bytearray(key, encoding='ASCII'), (4, 4)).T
    aes.state = numpy.reshape(bytearray(msg, encoding='ASCII'), (4, 4)).T

    print("Msg:"+msg)
    print(aes.state)

    enc = aes.encrypt()
    print("Enc:")
    print(aes.state)
    dec = aes.decrypt()
    print("Dec:")
    print(aes.state)

        #print(aes.state)
        #print(aes.keys)
